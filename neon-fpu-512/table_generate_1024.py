FALCON_Q = 12289
FALCON_N = 1024

def print_table(a, string):
    print("const int16_t %s[] = {" % string)
    for i in range(0, len(a), 8):
        for j in range(8):
            print("{:8d}".format(a[i + j]), end=', ')
        print()
    print("};")
    # print(len(a))

# ntt_mont
ntt_mont = [
    12289, -8345, -6759, 17893, -8809, 2171, -3007, -1265, -5349, -2945, 10883, 2633, 293, 9057, 3769, 4855, 567, -2941, -5289, 6627, -2595, 3837, -4273, 3221, 5207, -8239, 7087, 13133, -11607, 11309, -7207, 16879, 6105, -9169, 6643, 6203, -3753, -3941, 6919, -8753, 7559, 3229, -3929, 10583, 15861, -11007, -9457, 2021, 12239, -12073, -769, 6763, 3805, 767, -4153, -2213, 7235, -9135, -7929, 3285, -3723, 845, 7, -10353, 8929, 16973, -63, -5135, -2373, -4987, 8481, 15959, 6921, -11711, 10345, 11839, 12799, -4661, -6903, 9667, -10631, -6671, 8787, 5789, 11463, 5043, 10891, -9199, 10783, 3065, -4483, -5703, 11379, 6389, 751, -4719, 11675, 11009, 1371, 12265, 2485, 11385, 5039, -5547, 365, 881, 1927, 1015, -9343, 5461, 16799, 2637, -1555, -10487, 1891, 5103, 13879, -4411, 14623, 1223, 9951, 4693, 417, -2293, -8871, -4443, -3469, -6151, 14079, -5275, -6879, -1251, 11249, 2035, 6125, 10407, 11345, 7519, 3669, 5287, 15309, -5673, 4665, 6883, 9577, -7455, 7937, 9461, 12217, -4113, -10447, -8449, 16383, 3451, 7911, -1241, 3045, -5781, -1095, -2643, 9617, 7119, -1279, -865, 9173, 189, -2209, -1763, 10595, 10759, 4423, -3869, 10939, -6457, 3815, 10555, -9449, 14767, -3019, -8095, 17367, -1783, 7315, -4565, -5411, -9559, 10421, -2253, 7469, -11129, 16807, 15383, 6513, 1849, -3795, 9021, 4523, -4301, -12281, 457, 2593, -879, 14565, 13271, 7899, -8071, 16047, 8835, 11511, 7785, 9663, -11759, -4697, -8711, -1701, 8823, 9349, 10243, 1481, -2957, 14821, 3317, 8957, 139, -11823, 11259, -1681, 3821, -5969, 4649, 6263, 2929, 16135, 1573, 6063, 3793, 7171, 11787, 1901, -9687, 2301, -11415, -6639, -12119, -4289, 2307, 12439, 11641, 2535, 11169, -6481, -21, 9855, -791, 2873, 2827, -4227, 8921, 12901, 16527, 10763, 8067, 125, 11749, 8257, 3163, -7449, 6127, 14357, 1389, -11943, 16693, 3205, 3359, 11197, 5209, -4265, 15967, 11825, 10361, 9363, -10463, 3171, 4489, -3449, -11153, 15527, 15997, 4209, 17701, 5993, 9011, 12727, 3515, -5061, -11071, 1721, 10753, 4103, 2429, 15271, 1373, 3589, 717, 9839, -1705, 11475, 11873, 14399, 13005, -6873, 14453, 10423, -5211, 4727, -11081, 14197, -7751, 343, 8841, -4883, -3975, -3087, -5835, 6613, 1417, -2257, -4505, -4963, -8545, -9233, -9761, 12701, 17391, 5845, 6701, -4781, 17213, -11841, 13303, -3607, 1327, -7057, 16231, 12229, 2717, 1535, -9089, 16855, 18125, 12221, 14549, 6781, -1275, 18023, 11113, -1125, 17149, 1131, -1445, 17885, -5987, -3889, 579, 9175, -2769, 12077, 6323, -2461, 2275, -5653, 4267, -8113, 5063, 3765, 10771, -3961, 8755, -4145, 10533, 7725, 3495, 2065, -6463, 1687, 11883, 7021, -12143, 10485, 1403, 5189, 18383, 15189, -239, 7735, -11295, -11777, 16959, 7383, -6825, 2291, 3375, -4335, -3393, 8761, -4913, 4235, 3825, 16271, -2947, -5609, 12925, 1737, 11667, -4499, -6617, 4251, 4739, 11063, 6771, 7073, 9261, -9929, 11925, 3017, 11053, -4475, 7043, -4705, 3121, -9689, 1057, 3981, 10821, -463, -3407, -9247, 10945, 14343, -2483, 5219, -1409, -5509, 12493, -2689, -4605, 12469, -8151, -377, -7711, 10669, -375, 425, 10453, -11897, -2185, 4167, 6085, 923, 11251, 18381, -2231, -193, -9489, -1255, -11783, 6505, -10897, -8951, 15565, -9615, 14501, -8881, 10347, -1165, 2575, -11111, -9513, -3511, 6811, 10545, 10975, 15943, 15183, 2455, 6599, 11951, -3947, 4119, 3343, 2151, -10767, 7287, 12269, -5163, -7681, 14437, 5959, -5797, -3959, 11041, -9847, -4939, 5115, 1325, 6565, 1945, -1029, -8665, 10397, 17887, -8945, -4115, 15319, 1843, 2361, 12071, 15197, 3529, -8855, 11713, 3963, 2447, 18431, 2051, -10335, 1805, 9407, 3969, 3991, 12133, -2767, 6413, 2281, -5333, -2031, 11871, 16061, 453, 18197, 17063, 5429, -1293, -4737, 18157, 9551, -2655, -5735, -1693, -3009, -723, 12463, 3757, -1975, -2925, 347, -11863, -3315, 7535, -10431, 11939, -10777, -5383, -1815, 2057, 5369, -4493, 9087, 1489, 9789, 18231, -1583, -1483, 5915, 49, 1263, -11231, -4079, -441, -11367, 7967, 14247, 10211, -11177, -709, 16335, -1319, 9139, -8719, -8049, 835, -6065, -683, 2459, -12225, -8633, 6507, 10723, 2503, 9341, 1747, -3123, 17775, 9235, 5919, -4433, 5257, -8455, 7991, 3329, 9597, 12121, -7183, 5961, 10695, 10327, 2555, 6167, -11089, 7105, 8333, -10929, -5297, -6119, 13693, 325, 13237, 11143, -1159, 18279, 4049, 8561, -4077, 8273, 2919, 8527, 11637, 18055, 295, 6099, 241, 12231, 1003, 15821, 5009, 14245, -6281, -885, 5681, 3477, 1105, 12431, 8851, 9445, 8077, -975, -6695, -3029, 6403, 17071, 11785, -4213, 605, 14591, -8209, -421, 6221, -8687, -3263, 8689, -7665, 6077, -6415, 677, -8953, -6055, 15055, 1323, 9115, 12237, 431, 1579, 6383, -2505, 2839, 3957, 2127, 151, 7591, 5057, 3445, 17069, -1321, 12097, 2049, -7377, 11279, 6821, -787, 8807, 3127, -4169, -5241, 9369, -3565, 12943, -1987, 13991, 7083, -5529, -12233, 3199, 18151, -6153, 3643, -5415, 6137, 17237, -10561, -11889, 6843, 5339, -6093, 15999, 16277, 12757, 12671, 12605, 16287, -2033, 10367, 3879, 5435, -1359, 13543, 973, 15551, 5079, -11767, 2169, 7373, 7965, -5315, -4075, -9945, 11011, 17863, 1973, 1041, 8775, -11271, 5925, -8471, 18407, 2683, 13479, -5445, 16149, -11239, 7753, -6833, 4449, 3789, -147, -4749, -5537, -4467, -4789, -5011, -11287, 16573, -7201, 1607, 7313, 875, 8509, 8643, -2437, -2987, 18311, 2187, 9723, 14711, -6039, -2143, -1065, 4645, 11885, -5277, -11121, 9041, -1207, -8193, 493, -2381, 6845, 435, -4337, 10377, -10911, 4885, 1017, 17373, -10657, -9223, 27, -10849, -3763, 12047, 1537, 4143, -7575, 8585, 9611, 545, 5019, -4861, -11935, 6591, 9377, 2481, 17301, 1045, 2859, -773, 12679, 8511, -3833, 1067, -5101, 2401, -11847, 14975, -3247, 2969, 8311, -2865, 9919, 8779, 17621, 14415, 13919, 9103, 5407, 15173, -1153, -8241, -2249, -8889, -2399, -9153, -5191, -671, 9289, -243, -9273, 11869, -5559, 10745, 10111, -4905, 3985, 11813, 3531, -1689, 15653, 3271, 4057, 16703, -2847, 7917, 14463, 2305, 7247, -2645, 4053, 15069, 5195, 10805, -4895, 7351, 15925, 9585, 5291, 16943, 10863, 1777, 1663, -3149, 12129, -4437, -3, 4919, -113, 14455, 3915, 11809, 9447, -9, 13311, -339, 9821, 11745, 5791, 8011, -1673, 4989, -5331, -8705, -4177, 2525, 1381, 16037, -953, -5767, 827, 12171, 14765, 5067, 2197, -8993, 3949, 9893, 16741, 12159, 7935, 17663, 2837, 5179, 8595, 3707, -1759, 355, 15671, 4231, 9741, -3459, 3637, 17831, 145, 16221, -2731, 5911, 7399, 3289, 2013, -3241, 729, 9005, 2881, 2089, 7197, 11955, -9863, 10593, 13717, 5755, -7657, 13549, 16677, -2639, -4821, 949, -2625, 2975, -563, -9545, 9283, 4591, -6561, 6461, 5023, 5777, 8961, -1351, 7311, -8785, 15831, -3621, -2545, 11077, 10643, 6429, 3195, 11567, -1305, 16423, -6553, -4043, 7143, 1, -1479, 81, 3091, -11289, 7969, -7393, -2963, 9923, -3051, 4255, -1177, -9521, -1635, 1853, 12149, 13015, -4611, 2747, 17135, 8577, -3135, 3553, 4805, 14583, 11227, 9275, -3201, 13615, 17375, 13079, -955, 2319, 11119,
]
# ntt_mont_qinv
ntt_mont_qinv = [
    -1, 28825, -13721, -21989, 29289, 1925, 15295, -11023, 9445, -9343, 25981, -23113, -4389, 3231, -24249, 15625, 19913, -25731, 25769, 30237, 31267, 24835, -8015, -7317, 15273, 20527, -19375, 15539, -8873, 17363, -13273, -29167, -26585, -3119, 30221, -2107, 24233, 8037, 13561, -3535, 12921, 25443, 24409, 9897, -19957, 23295, -2831, -6117, -24527, 32553, -11519, -2667, 24867, -13055, 24633, 6309, 29629, 21423, 28409, -7381, -373, 27827, 20473, -1935, 3359, 11699, 12351, 17423, 6469, 891, 3807, 4521, -27401, 23999, -30825, -24127, -25087, 8757, -13577, 27197, -9849, 18959, 28077, 22883, 9017, 31821, -6795, 21487, -23071, -23545, -32381, -14777, 25485, -10485, -13039, 17007, -7579, 1279, 2725, -32745, -6581, -31865, -17327, 1451, 28307, 11407, 18553, 19465, 21631, -9557, -29087, 26035, 30227, -9993, -30563, -17391, 6601, 315, -26911, 19257, -22239, -8789, 11871, 6389, -11609, 347, -25203, -14329, -26367, 1179, 19167, 29923, 1039, -30707, 22547, 10073, 943, -19807, -7765, 15193, 13363, 26153, -25145, 29981, -30057, 19743, 4351, -13557, -32697, -8175, 22735, -3839, -28671, 645, 12569, 21721, -7141, 9877, -19385, 31315, 2671, -19407, 13567, -11423, -13269, 28483, -10079, 30435, 26269, 9721, 16057, -24803, -6843, 26937, 16665, -6459, 29929, -27055, -1077, 20383, 3113, -18697, 29549, 8661, -31453, -10921, -14517, -26419, 21203, 31609, 3673, 5097, 5775, -22329, 32467, 19651, -427, -24371, 32761, -20937, 9695, 13167, -18661, 7209, -3803, -12409, -28335, 28029, 8969, -28265, -21951, 24047, 25177, -11769, 5797, 11657, -13445, 26621, -21961, -25715, -18917, -7413, 19715, 3957, 24111, -7163, -10607, 24851, -6319, -25129, 14217, 9359, 4345, -5669, -18351, 8495, 29693, -7691, 26771, -10793, 26371, -9065, 18927, -8361, -7999, -30979, 8041, -32121, 17945, 1119, -5807, 4117, -22143, -19689, -23353, 1269, -32637, -29401, -16997, -28815, -6667, 28797, 28547, -15845, 4031, 933, 27929, -18415, -18453, 27283, -8537, -20789, -7301, -15647, 17475, -25689, 24745, -28255, 463, -30841, 27501, 22751, -31843, -24969, 23929, -1135, 4953, 12675, 8079, -21797, -26473, 27853, 7753, 581, 9157, 23359, -22201, 1535, 16377, 26243, 5209, 27299, -7685, 27955, -22127, 22185, 25389, 415, -26687, 15667, 27353, -18549, 10057, 1115, 15753, 31561, -18293, -12729, 20137, -29321, -31981, -16505, 15375, 1739, -10709, -21897, -10031, 24985, -31901, -3743, -3055, -2527, 15971, -29679, -9941, 21971, -23891, 11459, -447, 7177, -16873, -13615, -5231, 4249, -16325, 25955, -13823, -3199, 3625, 10547, 16451, -18645, 21891, -2821, 2457, -31593, 5221, 11523, 2965, 5541, 10787, -30877, -8399, -29251, 11305, -9519, 16595, 30541, -26211, -30947, 9749, -171, -4175, 15417, -7861, 26093, 24441, 28109, -8143, -14629, 20947, 16985, 10223, 18751, 18793, -7787, 21651, 24431, -14581, 2693, -9285, -30671, -19285, 12527, 12745, 23583, -511, -29247, 13097, 27305, -30963, -15663, 16623, -8895, -29241, -7375, -139, 8463, -28559, 31619, 26089, 15747, -22217, 25197, -32365, 27097, -155, 32125, 9417, 30093, 5215, 19411, 30409, -16021, -23497, 17619, 379, 29821, -7583, 9167, 30169, 11231, 24691, -14917, 12751, 15695, 21535, 1343, 6137, 31155, 31645, -10879, 9605, 16179, -9599, -24067, -16565, -12329, 20857, 19999, 18003, -20105, -20905, -14549, 32377, 22665, 16313, -10181, 3173, 25613, 10291, -18249, -12095, -2799, -19225, -8697, -26985, -1391, -11529, 13107, 21903, -18597, -3407, -6251, -27507, -14863, -9369, 29993, -16969, -2715, 1743, -23263, 4537, -27471, 18025, 13881, -24239, -149, 16361, -15631, 18329, 23055, 13193, 16403, 1067, -4607, -18533, 14521, 9893, -16521, 1247, -10633, 843, -1019, 27347, -10661, -22425, 5125, 29145, 18275, -30175, -3343, -32749, 5161, -30515, -22841, 8409, 13475, -24009, -11625, 575, 133, -14735, -30719, -30723, 22623, 26867, -21695, 8319, 16489, -16229, 15055, 22259, -22761, 9429, 14319, -24159, 12611, -4549, -22293, 3417, -9525, -27379, -7551, 10515, -21839, 14943, -14745, -26979, -9279, 29395, -24751, 24915, -18505, -25747, 3749, -8617, 31987, -19823, 22719, 24925, 31257, -15097, -18665, -22537, -25849, -24179, -21375, 10799, 18883, 2249, 13871, -2613, -1819, 12239, -13551, 23519, 16367, 20921, -9113, -20255, 6233, 26653, 31657, 4805, -28623, -19161, 27725, 21007, -4239, -29507, -6223, -3413, 1637, -63, 29113, -2411, 26141, 17977, 19331, -30419, 31795, -30063, 27629, -18207, -7855, -25737, -12025, 12489, 8959, 19075, -32601, 19471, -26441, 9785, 10153, 1541, 14313, -1199, 5183, 20339, -1359, -6991, -14361, 14979, -4421, -17333, 9337, -19321, 2201, 8239, 3727, -24595, 4015, 17561, -20815, -15733, 2425, 20185, 30765, 12047, 8249, 3093, 12851, 7279, -18341, 26761, 4981, 6607, -7573, 11183, -24719, 28013, -13541, 20595, 13263, -13785, 7125, 30461, -29359, -32265, 8309, 28067, -26879, -4079, 4517, 22451, 20975, 15551, 3599, -4623, 22595, 18703, -4773, 29433, -14425, -27343, 2773, -5019, 16435, -12719, 2517, -18671, 22985, 17641, -8053, -14415, 20329, 12889, 7231, -7541, 11603, 21801, 191, 10239, -4911, -23567, -10917, 29459, 11673, 17353, 24649, 25721, -29849, -25107, -25231, 30659, 6489, -2987, 26009, 32713, -15487, 2329, 26633, 453, -15065, -26617, -21333, -1727, -399, -2747, -1243, -22579, -28287, -20373, -16853, -24959, 16067, -28575, -10255, -22655, 16601, -1339, 13647, 6937, 27699, -27839, 15401, -8713, -22649, 21299, 20707, -31549, -21, 30425, 25853, 2617, -6069, 11247, 11705, -9209, -10021, -12009, 2073, 1413, 7001, 9541, -20245, -9241, -28233, -5455, 7839, 24883, 28819, -23923, -6751, -32397, 8885, -31853, -9193, 12099, -5087, 18873, 4975, 3221, 20163, 28221, 6533, -1109, 2169, 1909, -5627, 5769, -14441, 14431, 21545, -8741, 16787, -23395, -1167, 3247, -19273, -4095, 28179, -26291, 21827, -29107, -7951, -30857, 23199, -8981, -21497, 11299, -1631, -11257, 4069, -1439, 32435, -24335, 10751, -16431, -12905, -29065, -5515, 11743, -923, -23811, 24223, -18879, 2911, 9807, -21397, -5141, 1237, 4869, 7801, -20799, 24313, 3029, -23571, 9887, -8633, -27263, 15535, -23449, 12169, -9423, -22207, -4683, -21717, -26703, -26207, -21391, -17695, -19269, -11135, -4047, 22729, 29369, 14687, -3135, -15289, 12959, -29769, 28915, 29753, 16803, -14921, -31225, -22399, 25385, 8303, -15909, 565, 22169, -19749, 17209, -24537, -28991, 15135, 20755, -26751, 9983, -19535, 6741, -8149, 13603, -1099, -14901, 17183, 13129, -20021, 2703, -1195, -29231, -23151, 10511, -13951, -25523, 159, 8533, 28675, 15561, -12175, 6025, 181, 479, 11033, 20489, -25599, 29011, 18851, 543, -18079, -3915, 22153, 23683, -31533, -3583, -8111, 26147, -5477, -20133, 21433, -14713, 3269, -8075, 13907, -971, -6293, -3295, 24723, -13989, -20837, -24447, -20223, -29951, -6933, -1083, 28269, 389, 14047, -29027, 4809, 16249, 18931, 32131, -7733, 2649, 12143, 12451, -1365, 14569, 13081, -23769, 26659, 23721, -21209, 19667, 9407, -22569, 21475, 24909, -10617, 1695, -17813, -1659, 28137, 15123, -20773, 14927, 8917, -5045, -9663, -15263, 29235, 30025, 27581, -16879, -5727, 22211, -17311, 6511, 3327, -19129, -19599, -3503, 4649, 7717, -9743, -15173, 26221, 22243, 901, -23855, 21785, 4057, 27033, -53, 13337, 12287, -19001, 12207, -31763, 31769, 4319, -4895, 31635, 26941, -1045, -16543, 21657, -2767, 30307, 26819, -16245, 7465, -32253, 1349, -29423, 3711, 15423, 8735, -8901, 5897, -7131, -5179, -9087, -25903, -29663, 7401, -3141, -14607, -23407,
]

assert len(ntt_mont) == FALCON_N
assert len(ntt_mont_qinv) == FALCON_N

def dup(a, x):
    b = []
    for i in a:
        for j in range(x):
            b.append(i)
    return b

def inv_mont(n, mont=True):
    if mont:
        ret = (2**16 % FALCON_Q)**2 * pow(n, -1, FALCON_Q) % FALCON_Q
    else:
        ret = (2**16 % FALCON_Q) * pow(n, -1, FALCON_Q) % FALCON_Q
    
    return  ret


# 0 - 127
# 128 - 255
# 256 - 383
# 384 - 511
# 512 - 639
# 640 - 767
# 768 - 895
# 896 - 1023
def gen_table06_invntt(zetas):
    inv_zetas = zetas[:]
    inv_zetas = inv_zetas[::-1]

    bar0 = 0
    bar1 = FALCON_N//2
    bar2 = FALCON_N//2 + FALCON_N//4
    bar3 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8
    bar4 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16
    bar5 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16 + FALCON_N//32
    bar6 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16 + FALCON_N//32 + FALCON_N//64

    final_inv_zetas = []

    for iter in range(0, FALCON_N, 128):
        # Layer 0 = Distance 1
        pool = inv_zetas[bar0: bar0 + 64]
        block1 = pool[0::2]
        block2 = pool[1::2]

        final_inv_zetas += block1 
        final_inv_zetas += block2

        bar0 += 64

        # Layer 1 = Distance 2
        # 0 - 127
        pool = inv_zetas[bar1: bar1 + 32]
        block3 = pool

        final_inv_zetas += block3

        bar1 += 32

        # Layer 2 = Distance 4
        pool = inv_zetas[bar2: bar2 + 16]
        block5 = pool[0::2]
        block6 = pool[1::2]

        block5 = dup(block5, 4)
        block6 = dup(block6, 4)

        final_inv_zetas += block5
        final_inv_zetas += block6

        bar2 += 16

        # Layer 3 = Distance 8
        pool = inv_zetas[bar3: bar3 + 8]
        block7 = pool

        block7 = dup(block7, 4)

        final_inv_zetas += block7
        bar3 += 8

        # Layer 4 = Distance 16
        pool = inv_zetas[bar4 : bar4 + 4]

        block8 = pool

        final_inv_zetas += block8
        bar4 += 4

        # Layer 5 = Distance 32
        pool = inv_zetas[bar5 : bar5 + 2]

        block9 = pool

        final_inv_zetas += block9
        bar5 += 2

        # Layer 6 = Distance 64
        pool = inv_zetas[bar6 : bar6 + 1]

        block10 = pool

        final_inv_zetas += block10
        bar6 += 1

        final_inv_zetas += [0]

        assert len(final_inv_zetas) % 8 == 0

    return final_inv_zetas

def gen_table79_invntt(zetas, mont=False):
    # TODO: Separate FALCON_N 512 from 1024. Clean up this script.
    inv_zetas = zetas[:]
    inv_zetas = inv_zetas[::-1]

    bar7 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16 + FALCON_N//32 + FALCON_N//64 + FALCON_N//128
    bar8 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16 + FALCON_N//32 + FALCON_N//64 + FALCON_N//128 + FALCON_N//256
    bar9 = FALCON_N//2 + FALCON_N//4 + FALCON_N//8 + FALCON_N//16 + FALCON_N//32 + FALCON_N//64 + FALCON_N//128 + FALCON_N//256 + FALCON_N//512

    final_inv_zetas = []

    n512_inv = inv_mont(512, mont=False)
    n512_inv_mont = inv_mont(512, mont=True)

    n1024_inv = inv_mont(1024, mont=False)
    n1024_inv_mont = inv_mont(1024, mont=True)
    
    # Layer 7 = Distance 128
    final_inv_zetas = inv_zetas[bar7: bar7 + 4]

    # Layer 8 = Distance 256, Embed N^-1 * Mont to the last layer for N = 512
    if FALCON_N == 512:
        if mont: 
            temp = list(map(lambda x: x * n512_inv_mont % FALCON_Q,  inv_zetas[bar8: bar8 + 2]))
        else:
            temp = list(map(lambda x: x * n512_inv % FALCON_Q,  inv_zetas[bar8: bar8 + 2]))
        
        final_inv_zetas += temp

    elif FALCON_N == 1024:
        final_inv_zetas += inv_zetas[bar8: bar8 + 2]

    # Layer 9 = Distance 512, Embed N^-1 * Mont to the last layer for N = 1024
    if FALCON_N == 512:
        final_inv_zetas += [0]
    elif FALCON_N == 1024:
        if mont: 
            temp = list(map(lambda x: x * n1024_inv_mont % FALCON_Q, inv_zetas[bar9: bar9 + 1]))
        else: 
            temp = list(map(lambda x: x * n1024_inv % FALCON_Q, inv_zetas[bar9: bar9 + 1]))
        
        final_inv_zetas += temp

    # N^-1 * Mont
    if FALCON_N == 512:
        if mont:
            # (2**16 % q)**2 * pow(512, -1, q) % q
            final_inv_zetas += [n512_inv_mont]
        else:
            # (2**16 % q) * pow(512, -1, q) % q
            final_inv_zetas += [n512_inv]
    elif FALCON_N == 1024:
        if mont:
            # (2**16 % q)**2 * pow(1024, -1, q) % q
            final_inv_zetas += [n1024_inv_mont]
        else:
            # (2**16 % q) * pow(1024, -1, q) % q
            final_inv_zetas += [n1024_inv]
    else:
        print("Not supported")

    assert len(final_inv_zetas) % 8 == 0

    return final_inv_zetas

invntt = gen_table06_invntt(ntt_mont)
invntt += gen_table79_invntt(ntt_mont, mont=False)

invntt_qinv = gen_table06_invntt(ntt_mont_qinv)
invntt_qinv += gen_table79_invntt(ntt_mont_qinv, mont=False)

# Sanity check
for index, item in enumerate(invntt):
    if item % 2 == 0 and item != 0:
        print(f"At {index}: {item}")

# print_table(invntt, "invntt")
# print_table(invntt_qinv, "invntt_qinv")
